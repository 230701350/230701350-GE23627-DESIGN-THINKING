<!-- views/history.ejs -->
<%- include('./partials/header') %>
    <%- include('./partials/navbar') %>

        <div class="container mt-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Image History</h1>
                <div id="batchOperations" class="d-none">
                    <span class="me-2">
                        <span id="selectedImagesCount">0</span> images selected
                    </span>
                    <button id="batchDeleteBtn" class="btn btn-danger">
                        <i class="bi bi-trash"></i> Delete Selected
                    </button>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <p class="mb-0">View your previously processed images</p>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="selectAllImages">
                            <label class="form-check-label" for="selectAllImages">
                                Select All
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Image gallery -->
            <div class="row" id="imageGallery">
                <!-- Images will be loaded here via JavaScript -->
            </div>

            <!-- Image Detail Modal -->
            <div class="modal fade" id="imageDetailModal" tabindex="-1" aria-labelledby="imageDetailModalLabel"
                aria-hidden="true">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="detailModalTitle">Image Detail</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <h5>Original Image</h5>
                                    <div class="border p-2 bg-light text-center">
                                        <img id="originalImage" class="img-fluid" alt="Original Image">
                                    </div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <h5>Processed Image</h5>
                                    <div class="border p-2 bg-light text-center">
                                        <img id="processedImage" class="img-fluid" alt="Processed Image">
                                    </div>
                                </div>
                            </div>

                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <h5>Image Details</h5>
                                    <ul class="list-group">
                                        <li class="list-group-item">
                                            <strong>CVD Type:</strong> <span id="imageDetailType"></span>
                                        </li>
                                        <li class="list-group-item">
                                            <strong>Processed Date:</strong> <span id="imageDetailDate"></span>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <a id="downloadOriginal" class="btn btn-outline-primary" download="original-image.jpg">
                                <i class="bi bi-download"></i> Download Original
                            </a>
                            <a id="downloadProcessed" class="btn btn-primary" download="processed-image.jpg">
                                <i class="bi bi-download"></i> Download Processed
                            </a>
                            <button type="button" class="btn btn-danger" id="deleteImageBtn">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script src="/js/history-client.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Load images when the page loads
                loadImageHistory();

                // Event for Select All checkbox
                const selectAllCheckbox = document.getElementById('selectAllImages');
                if (selectAllCheckbox) {
                    selectAllCheckbox.addEventListener('change', function () {
                        const checkboxes = document.querySelectorAll('.image-select-checkbox');
                        checkboxes.forEach(checkbox => {
                            checkbox.checked = selectAllCheckbox.checked;
                        });
                        updateSelectedCount();
                    });
                }

                // Event for batch delete button
                const batchDeleteBtn = document.getElementById('batchDeleteBtn');
                if (batchDeleteBtn) {
                    batchDeleteBtn.addEventListener('click', batchDeleteImages);
                }

                // Event for delete button in modal
                const deleteImageBtn = document.getElementById('deleteImageBtn');
                if (deleteImageBtn) {
                    deleteImageBtn.addEventListener('click', function () {
                        const imageId = this.getAttribute('data-image-id');
                        if (imageId) {
                            deleteImage(imageId);
                        }
                    });
                }
            });

            // Function to load image history
            async function loadImageHistory() {
                const galleryElement = document.getElementById('imageGallery');
                const loadingSpinner = document.getElementById('loadingSpinner');

                try {
                    const response = await fetch('/history/api/images');
                    const data = await response.json();

                    // Hide loading spinner
                    if (loadingSpinner) {
                        loadingSpinner.classList.add('d-none');
                    }

                    if (data.success && data.images && data.images.length > 0) {
                        // Clear gallery before adding new images
                        galleryElement.innerHTML = '';

                        // Add images to gallery
                        data.images.forEach(image => {
                            const card = createImageCard(image);
                            galleryElement.appendChild(card);
                        });

                        // Add event listeners to checkboxes
                        setupCheckboxListeners();
                    } else {
                        galleryElement.innerHTML = '<div class="col-12 text-center py-5"><p>No images in your history yet.</p></div>';
                    }
                } catch (error) {
                    console.error('Error loading image history:', error);
                    if (loadingSpinner) {
                        loadingSpinner.classList.add('d-none');
                    }
                    galleryElement.innerHTML = '<div class="col-12 text-center py-5"><p>Error loading images. Please try again later.</p></div>';
                }
            }

            // Function to create image card
            function createImageCard(image) {
                const col = document.createElement('div');
                col.className = 'col-md-4 col-lg-3 mb-4';

                const date = new Date(image.processedDate).toLocaleDateString();

                col.innerHTML = `
        <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div class="form-check">
                    <input class="form-check-input image-select-checkbox" type="checkbox" value="${image._id}" id="check-${image._id}">
                    <label class="form-check-label" for="check-${image._id}">
                        ${image.cvdType}
                    </label>
                </div>
                <small class="text-muted">${date}</small>
            </div>
            <img src="${image.processedImageUrl}" class="card-img-top" alt="Processed image" 
                data-original="${image.originalImageUrl}" 
                data-processed="${image.processedImageUrl}"
                data-id="${image._id}"
                data-cvdtype="${image.cvdType}"
                data-date="${date}">
            <div class="card-body text-center">
                <button class="btn btn-sm btn-outline-primary view-detail-btn" data-id="${image._id}">View Detail</button>
            </div>
        </div>
    `;

                // Add click event for the whole card to view detail
                const img = col.querySelector('img');
                img.addEventListener('click', function () {
                    showImageDetail(image);
                });

                // Add click event for the view detail button
                const viewButton = col.querySelector('.view-detail-btn');
                viewButton.addEventListener('click', function (e) {
                    e.preventDefault();
                    showImageDetail(image);
                });

                return col;
            }

            // Function to show image detail in modal
            function showImageDetail(image) {
                // Set image sources
                document.getElementById('originalImage').src = image.originalImageUrl;
                document.getElementById('processedImage').src = image.processedImageUrl;

                // Set download links
                document.getElementById('downloadOriginal').href = image.originalImageUrl;
                document.getElementById('downloadProcessed').href = image.processedImageUrl;

                // Set image details
                document.getElementById('imageDetailType').textContent = image.cvdType;
                document.getElementById('imageDetailDate').textContent = new Date(image.processedDate).toLocaleString();

                // Set image ID for delete button
                document.getElementById('deleteImageBtn').setAttribute('data-image-id', image._id);

                // Show modal
                const modal = new bootstrap.Modal(document.getElementById('imageDetailModal'));
                modal.show();
            }

            // Function to delete an image
            async function deleteImage(imageId) {
                if (!confirm('Are you sure you want to delete this image?')) {
                    return;
                }

                try {
                    const response = await fetch(`/history/api/images/${imageId}`, {
                        method: 'DELETE'
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Close modal and reload images
                        const modal = bootstrap.Modal.getInstance(document.getElementById('imageDetailModal'));
                        modal.hide();

                        // Reload gallery
                        loadImageHistory();
                    } else {
                        alert('Failed to delete image: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error deleting image:', error);
                    alert('An error occurred while deleting the image.');
                }
            }

            // Function to batch delete images
            async function batchDeleteImages() {
                const selectedCheckboxes = document.querySelectorAll('.image-select-checkbox:checked');

                if (selectedCheckboxes.length === 0) {
                    alert('Please select at least one image to delete.');
                    return;
                }

                if (!confirm(`Are you sure you want to delete ${selectedCheckboxes.length} selected images?`)) {
                    return;
                }

                const imageIds = Array.from(selectedCheckboxes).map(checkbox => checkbox.value);

                try {
                    const response = await fetch('/history/api/images/batch-delete', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ imageIds })
                    });

                    const result = await response.json();

                    if (result.success) {
                        alert(result.message);
                        // Reload gallery
                        loadImageHistory();
                        // Uncheck select all checkbox
                        const selectAllCheckbox = document.getElementById('selectAllImages');
                        if (selectAllCheckbox) {
                            selectAllCheckbox.checked = false;
                        }
                        // Hide batch operations
                        document.getElementById('batchOperations').classList.add('d-none');
                    } else {
                        alert('Failed to delete images: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error batch deleting images:', error);
                    alert('An error occurred while deleting the images.');
                }
            }

            // Function to setup checkbox listeners
            function setupCheckboxListeners() {
                const checkboxes = document.querySelectorAll('.image-select-checkbox');

                checkboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', updateSelectedCount);
                });
            }

            // Function to update selected count
            function updateSelectedCount() {
                const selectedCheckboxes = document.querySelectorAll('.image-select-checkbox:checked');
                const count = selectedCheckboxes.length;

                document.getElementById('selectedImagesCount').textContent = count;

                // Show/hide batch operations
                if (count > 0) {
                    document.getElementById('batchOperations').classList.remove('d-none');
                } else {
                    document.getElementById('batchOperations').classList.add('d-none');
                }
            }
        </script>

        <%- include('./partials/footer') %>